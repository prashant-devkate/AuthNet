@model AuthNet.UI.Models.DTO.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    var token = Context?.Session?.GetString("JWT");
    var username = Context?.Session?.GetString("Username");
    var isLoggedIn = !string.IsNullOrEmpty(token);
}

<style>
    :root {
        --primary-color: #17a2b8;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --info-color: #6610f2;
        --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        --border-radius: 8px;
        --transition: all 0.2s ease;
    }

    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1rem;
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .dashboard-card {
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        transition: var(--transition);
        overflow: hidden;
        color: white;
        text-align: center;
        padding: 1rem;
    }

        .dashboard-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .counter {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .card-text {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .chart-container {
        position: relative;
        height: 280px;
        width: 100%;
        max-width: 360px;
        margin: 0 auto;
    }

    .card-header {
        font-weight: 500;
        font-size: 1.1rem;
        padding: 0.75rem 1rem;
        background: #f8f9fa;
    }

    .task-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .task-item {
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .task-item .badge {
            font-size: 0.85rem;
        }

    .task-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.85rem;
    }
</style>

<div class="dashboard-container">
    <h4 class="mb-3">Welcome back, @username</h4>

    <!-- Dashboard Cards -->
    <div class="dashboard-cards">
        <partial name="_DashboardCard" model='new { Count = Model.TotalProducts, Title = "Products", Color = "bg-primary" }' />
        <partial name="_DashboardCard" model='new { Count = Model.TotalCategories, Title = "Categories", Color = "bg-success" }' />
        <partial name="_DashboardCard" model='new { Count = Model.TotalSuppliers, Title = "Suppliers", Color = "bg-warning" }' />
        <partial name="_DashboardCard" model='new { Count = Model.TotalTasks, Title = "Tasks", Color = "bg-danger" }' />
        <partial name="_DashboardCard" model='new { Count = Model.TotalOrders, Title = "Orders", Color = "bg-info" }' />
        <partial name="_DashboardCard" model='new { Count = Model.TotalDailySales, Title = "Total Sales", Color = "bg-info" }' />
    </div>

    <!-- Donut chart & Task Panel -->
    <div class="row g-3">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Inventory Overview</div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="donutChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Tasks</span>
                    <a asp-controller="Tasks" asp-action="Add" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-plus-circle me-1"></i> Add
                    </a>
                </div>
                <div class="card-body task-list">
                    @if (Model.Tasks != null && Model.Tasks.Any())
                    {
                        @foreach (var task in Model.Tasks)
                        {
                            <div class="task-item list-group-item">
                                <span class="fw-semibold flex-grow-1">@task.Title</span>
                                <span class="badge bg-@task.BadgeColor @(task.BadgeColor == "warning" ? "text-dark" : "")">
                                    @task.DueLabel
                                </span>
                                <div class="task-actions ms-auto">
                                    <a asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Id"
                                       class="btn btn-sm btn-outline-secondary" title="Edit Task">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <form asp-controller="Tasks" asp-action="Delete" asp-route-id="@task.Id" method="post"
                                          onsubmit="return confirm('Are you sure you want to delete this task?');" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-danger" title="Delete Task">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="list-group-item text-muted">No tasks available</div>
                    }
                </div>
            </div>
        </div>

        <!-- Bar Chart -->
        <div class="row g-3">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Sales Overview</div>
                    <div class="card-body">
                        <div class="chart-container mt-3">
                            <canvas id="barChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Donut Chart rendering
        const donutChartElement = document.getElementById('donutChart');
        if (donutChartElement) {
            new Chart(donutChartElement.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: ['Products', 'Categories', 'Suppliers', 'Tasks', 'Orders'],
                    datasets: [{
                        label: 'Inventory Stats',
                        data: [@Model.TotalProducts, @Model.TotalCategories, @Model.TotalSuppliers, @Model.TotalTasks, @Model.TotalOrders],
                        backgroundColor: ['#17a2b8', '#28a745', '#ffc107', '#dc3545', '#6610f2']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });
        }

        // Bar Chart rendering
        const barChartElement = document.getElementById('barChart');
        if (barChartElement) {
            new Chart(barChartElement.getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['Products', 'Categories', 'Suppliers', 'Tasks', 'Orders'],
                    datasets: [{
                        label: 'Inventory Stats',
                        data: [@Model.TotalProducts, @Model.TotalCategories, @Model.TotalSuppliers, @Model.TotalTasks, @Model.TotalOrders],
                        backgroundColor: ['#17a2b8', '#28a745', '#ffc107', '#dc3545', '#6610f2']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });
        }

        // Counter animation
        document.querySelectorAll('.counter').forEach(counter => {
            const target = +counter.getAttribute('data-target');
            let count = 0;
            const increment = Math.ceil(target / 50);
            const updateCount = () => {
                if (count < target) {
                    count += increment;
                    counter.innerText = Math.min(count, target);
                    requestAnimationFrame(updateCount);
                }
            };
            requestAnimationFrame(updateCount);
        });
    </script>
}