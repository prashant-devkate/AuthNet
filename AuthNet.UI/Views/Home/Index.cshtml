@model AuthNet.UI.Models.DTO.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<style>
    .dashboard-cards .card {
        border-radius: 10px;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        transition: transform 0.3s;
        height: 100%;
    }

        .dashboard-cards .card:hover {
            transform: translateY(-5px);
        }

    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
    }

    .card-header {
        font-weight: 600;
    }

    .counter {
        font-size: 2rem;
        font-weight: bold;
    }
</style>

@{
    var token = Context?.Session?.GetString("JWT");
    var username = Context?.Session?.GetString("Username");
    var isLoggedIn = !string.IsNullOrEmpty(token);
}

<h4 class="mb-4">Welcome back, @username</h4>

<!-- Responsive Cards with Animated Counters -->
<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-3 dashboard-cards mb-4">
    <div class="col">
        <div class="card text-white bg-primary">
            <div class="card-body text-center">
                <div class="counter" data-target="@Model.TotalProducts">0</div>
                <p class="card-text">Products</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card text-white bg-success">
            <div class="card-body text-center">
                <div class="counter" data-target="@Model.TotalCategories">0</div>
                <p class="card-text">Categories</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card text-white bg-warning">
            <div class="card-body text-center">
                <div class="counter" data-target="@Model.TotalSuppliers">0</div>
                <p class="card-text">Suppliers</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card text-white bg-danger">
            <div class="card-body text-center">
                <div class="counter" data-target="@Model.TotalTasks">0</div>
                <p class="card-text">Tasks</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card text-white bg-info">
            <div class="card-body text-center">
                <div class="counter" data-target="@Model.TotalOrders">0</div>
                <p class="card-text">Orders</p>
            </div>
        </div>
    </div>
</div>

<!-- Chart & Task Panel -->
<div class="row">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">Inventory Overview</div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="donutChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Tasks</h5>
                <a asp-controller="Tasks" asp-action="Add" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-plus-circle me-1"></i> Add Task
                </a>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @if (Model.Tasks != null && Model.Tasks.Any())
                    {
                        foreach (var task in Model.Tasks)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center py-2">
                                <div class="d-flex flex-column flex-md-row align-items-md-center flex-grow-1">
                                    <span class="fw-semibold me-md-3 mb-1 mb-md-0">@task.Title</span>
                                    <span class="badge bg-@task.BadgeColor @(task.BadgeColor == "warning" ? "text-dark" : "")">
                                        @task.DueLabel
                                    </span>
                                </div>
                                <div class="d-flex align-items-center gap-2 ms-auto">
                                    <a asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Id"
                                       class="btn btn-sm btn-outline-secondary" title="Edit Task">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <form asp-controller="Tasks" asp-action="Delete" asp-route-id="@task.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this task?');" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-danger" title="Delete Task">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>
                                    </form>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">No tasks available</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Chart rendering
        const chartElement = document.getElementById('donutChart');
        if (chartElement) {
            const chartCtx = chartElement.getContext('2d');
            new Chart(chartCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Products', 'Categories', 'Suppliers', 'Tasks', 'Orders'],
                    datasets: [{
                        label: 'Inventory Stats',
                        data: [@Model.TotalProducts, @Model.TotalCategories, @Model.TotalSuppliers, @Model.TotalTasks, @Model.TotalOrders],
                        backgroundColor: ['#17a2b8', '#28a745', '#ffc107', '#dc3545', '#6610f2']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Counter animation
        document.querySelectorAll('.counter').forEach(counter => {
            const updateCount = () => {
                const target = +counter.getAttribute('data-target');
                const count = +counter.innerText;
                const increment = Math.ceil(target / 60);

                if (count < target) {
                    counter.innerText = count + increment;
                    setTimeout(updateCount, 20);
                } else {
                    counter.innerText = target;
                }
            };

            updateCount();
        });
    </script>
}
