@model List<AuthNet.UI.Models.DTO.ProductListViewModel>
@{
    ViewBag.Title = "Sales Panel";

    var allProducts = Model?
        .Where(m => m?.Products != null)
        .SelectMany(m => m.Products)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.ProductDto>();

    var allTemplates = Model?
        .Where(m => m?.Invoices != null)
        .SelectMany(m => m.Invoices)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.InvoiceTemplateDto>();

    var templateMap = allTemplates.ToDictionary(
        t => t.Id,
        t => new
        {
            layout = t.Layout,
            notes = t.Notes,
            terms = t.TermsAndConditions
        });

    var allCats = Model?
        .Where(c => c?.Cats != null)
        .SelectMany(c => c.Cats)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.CategoryViewModel>();

    var companyInfo = Model?
        .Where(m => m?.company != null)
        .Select(m => m.company)
        .FirstOrDefault() ?? new AuthNet.UI.Models.DTO.CompanyInfoDto();

    var taxSetting = Model?
        .Where(m => m?.tax != null)
        .Select(m => m.tax)
        .FirstOrDefault() ?? new AuthNet.UI.Models.DTO.TaxDto();
}

<!-- Custom CSS for Badges -->
<style>
    .badge-order-status {
        background-color: #ebedef;
        color: #3a3b45;
        font-weight: 500;
    }
</style>

<!-- Print-Only CSS -->
<style media="print">
    @@page {
        size: A4;
        margin: 10mm;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

        body * {
            visibility: hidden;
        }

    #printArea, #printArea * {
        visibility: visible;
    }

    #printArea {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        padding: 20px;
        page-break-inside: avoid;
    }

    table, tr, td, th {
        page-break-inside: avoid !important;
        break-inside: avoid !important;
    }

    .btn {
        display: none !important;
    }

    .card-title {
        font-size: 0.85rem;
        white-space: normal;
        word-break: break-word;
        line-height: 1.2;
        min-height: 2.2em;
    }
</style>

<!-- Enhanced UI CSS -->
<style>
    :root {
        --primary-color: #1e3a8a;
        --accent-color: #f59e0b;
        --bg-light: #f9fafb;
        --text-muted: #6b7280;
    }

    body {
        background-color: var(--bg-light);
        font-family: 'Nunito', sans-serif;
    }

    .container-fluid {
        padding-top: 1rem !important;
    }

    .form-select {
        max-width: 160px;
        font-size: 0.9rem;
    }

    .form-label {
        font-size: 0.9rem;
    }

    .search-container {
        position: relative;
        margin: 0.5rem;
    }

        .search-container input {
            padding-right: 2.5rem;
            font-size: 0.9rem;
        }

        .search-container .fas.fa-search {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

        .search-container .fas.fa-times-circle {
            position: absolute;
            right: 28px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #dc3545;
            display: none;
        }

    .filter-container {
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .cart-table {
        font-size: 0.85rem;
    }

        .cart-table th, .cart-table td {
            padding: 6px;
        }

    .action-buttons .btn {
        font-size: 0.75rem;
        padding: 4px 8px;
        line-height: 1;
    }

    .no-spinner::-webkit-inner-spin-button,
    .no-spinner::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .no-spinner[type="number"] {
        -moz-appearance: textfield;
    }

    .product-grid {
        margin-top: 0.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .product-item {
        flex: 1 0 calc(16.66% - 0.75rem);
        max-width: calc(16.66% - 0.75rem);
    }

    @@media (max-width: 1200px) {
        .product-item {
            flex: 1 0 calc(20% - 0.75rem);
            max-width: calc(20% - 0.75rem);
        }
    }

    @@media (max-width: 992px) {
        .product-item {
            flex: 1 0 calc(25% - 0.75rem);
            max-width: calc(25% - 0.75rem);
        }
    }

    @@media (max-width: 768px) {
        .product-item {
            flex: 1 0 calc(33.33% - 0.75rem);
            max-width: calc(33.33% - 0.75rem);
        }
    }

    @@media (max-width: 576px) {
        .product-item {
            flex: 1 0 calc(50% - 0.75rem);
            max-width: calc(50% - 0.75rem);
        }
    }

    .product-card {
        cursor: pointer;
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
        background-color: #ffffff;
        padding: 0.75rem;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        transition: box-shadow 0.2s ease-in-out;
        position: relative;
        pointer-events: auto;
    }

        .product-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .product-card .card-body {
            padding: 0;
        }

    .card-title {
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 0;
        line-height: 1.3;
        white-space: normal;
        overflow: hidden;
        word-break: break-word;
        text-wrap: balance;
    }

    .product-card .badge {
        position: absolute;
        top: 6px;
        right: 6px;
        background-color: #007bff;
        color: white;
        font-size: 0.65rem;
        font-weight: 500;
        padding: 0.2rem 0.5rem;
        border-radius: 0.5rem;
    }
</style>

<!-- Page Content -->
<div class="container-fluid">

    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800"><i class="fas fa-cash-register me-2"></i> Sales Panel</h1>
        <div class="d-none d-sm-inline-block">
            <input type="hidden" id="tplSelect" name="Template" value="@(allTemplates.FirstOrDefault()?.Id)">
            <select id="templateFilter" class="form-select" name="Templates">
                <option disabled value="">-- Select Template --</option>
                @foreach (var t in allTemplates)
                {
                    <option value="@t.Id">@t.Layout</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        <!-- Product List -->
        <div class="col-md-7 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-cart-plus me-2"></i> Products</h6>
                </div>
                <div class="card-body">
                    <!-- Category Filter -->
                    <div class="filter-container mb-3">
                        <label class="form-label mb-0">Category:</label>
                        <div class="dropdown">
                            <select id="categoryFilter" class="form-select" name="Categories">
                                <option disabled value="">-- Select Category --</option>
                                <option value="all" selected>All Categories</option>
                                @foreach (var t in allCats)
                                {
                                    <option value="@t.CategoryId">@t.Name</option>
                                }
                            </select>
                            <div class="dropdown-menu animated--grow-in" aria-labelledby="categoryFilter" style="min-width: 160px;">
                                <a class="dropdown-item text-gray-800" href="javascript:void(0)" onclick="document.getElementById('categoryFilter').value='all';document.getElementById('categoryFilter').dispatchEvent(new Event('change'));">All Categories</a>
                                @foreach (var t in allCats)
                                {
                                    <a class="dropdown-item text-gray-800" href="javascript:void(0)" onclick="document.getElementById('categoryFilter').value='@t.CategoryId';document.getElementById('categoryFilter').dispatchEvent(new Event('change'));">@t.Name</a>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Search Input -->
                    <div class="search-container mb-3">
                        <input type="text" id="productSearch" class="form-control bg-light border-0 small" placeholder="Search products..." aria-label="Search products">
                        <i class="fas fa-search"></i>
                        <i class="fas fa-times-circle clear-search" onclick="clearSearch()"></i>
                    </div>

                    <!-- Product Grid -->
                    <div class="product-grid" id="productGrid">
                        @foreach (var product in allProducts)
                        {
                            <div class="product-item"
                                 data-name="@product.Name.ToLower()"
                                 data-id="@product.ProductId"
                                 data-category="@product.CategoryId"
                                 data-product-key="@product.ProductKey.ToString().ToLower()">
                                <div class="product-card" data-id="@product.ProductId">
                                    <div class="card-body">
                                        <h6 class="card-title" title="@product.Name">@product.Name</h6>
                                        @if (product.ProductKey != 0)
                                        {
                                            <span class="badge badge-order-status">@product.ProductKey</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Cart Display -->
        <div class="col-md-5" id="printArea">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-receipt me-2"></i> Cart</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-end mb-3">
                        <div class="action-buttons d-flex align-items-center gap-2">
                            <!-- Discount Input -->
                            <div class="input-group input-group-sm me-2" style="max-width: 70px;">
                                <input type="number"
                                       id="discountPercent"
                                       class="form-control no-spinner text-end"
                                       placeholder="%"
                                       min="0"
                                       max="100"
                                       step="0.1"
                                       style="font-size: 0.8rem;"
                                       onchange="renderCart()" />
                            </div>
                            <!-- Sell Button -->
                            <form id="sellForm" class="d-inline">
                                <input type="hidden" id="cartData" name="cartData" value="" />
                                <button type="submit" class="btn btn-success btn-sm" onclick="sellCart(event)" title="Sell">
                                    <i class="fas fa-check"></i>
                                </button>
                            </form>
                            <!-- Print Button -->
                            <button class="btn btn-primary btn-sm" onclick="printCart()" title="Print">
                                <i class="fas fa-print"></i>
                            </button>
                            <!-- Clear Cart Button -->
                            <button class="btn btn-danger btn-sm" onclick="startNextSale()" title="Clear">
                                <i class="fas fa-undo"></i>
                            </button>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered table-hover cart-table" id="cartTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price (₹)</th>
                                    <th style="width: 120px;">Qty</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr class="fw-bold">
                                    <td colspan="2" class="text-end">Grand Total (₹):</td>
                                    <td id="grandTotal">₹0.00</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toastSuccess" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
        <div id="toastError" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>

    <script>
        $(document).ready(function() {
            // Verify jQuery is loaded
            console.log('jQuery loaded:', typeof $ === 'function' ? 'Yes' : 'No');

            // Log product cards to verify they exist
            const productCards = $('.product-card');
            console.log('Product cards found:', productCards.length);
            if (productCards.length > 0) {
                productCards.each(function(index) {
                    console.log(`Product card ${index + 1} data-id:`, $(this).data('id'), 'Name:', $(this).find('.card-title').text(), 'HTML:', $(this).prop('outerHTML'));
                });
            } else {
                console.error('No product cards found in #productGrid');
            }

            // Initialize DataTable
            $('#cartTable').DataTable({
                paging: false,
                searching: false,
                ordering: false,
                info: false
            });

            // Event delegation for product cards
            $('#productGrid').on('click', '.product-card', function(e) {
                e.preventDefault();
                let productId = $(this).data('id') || $(this).attr('data-id');
                if (!productId) {
                    console.error('No productId found for clicked element:', this);
                    showToast('Unable to add product: ID not found.', 'error');
                    return;
                }
                console.log('Product card clicked, productId:', productId, 'Type:', typeof productId);
                addToCart(productId);
            });

            // Fallback click handler on document
            $(document).on('click', '.product-card', function(e) {
                console.log('Fallback click handler triggered for product card:', $(this).data('id'));
            });

            // Template filter change handler
            $('#templateFilter').on('change', function() {
                const selectedId = this.value;
                const selectedLayout = this.options[this.selectedIndex].text;
                document.getElementById('tplSelect').value = selectedId;
                document.getElementById('tplSelect').dispatchEvent(new Event('change'));
                console.log('Selected template: ' + selectedLayout + ', ID: ' + selectedId);
            });
        });

        const companyName = '@(companyInfo.Name ?? "InventoryPro")';
        const companyAddress = '@(companyInfo.Address ?? "Pune")';
        const companyGstNo = '@(companyInfo.GSTIN ?? "GSTXXXXXXX")';
        const companyContact = '@(companyInfo.ContactNumber ?? "XXXXXXXXXX")';
        const cgstTax = '@(taxSetting.CGST)';
        const sgstTax = '@(taxSetting.SGST)';
        const igstTax = '@(taxSetting.IGST)';
        const apiBaseUrl = '@ViewBag.ApiBaseUrl';
        let products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(allProducts));
        const templates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(templateMap));
        const cart = {};

        // Fallback products array if server data is empty
        if (!products || !Array.isArray(products) || products.length === 0) {
            console.warn('Products array is empty or invalid, using fallback:', products);
            products = [
                { ProductId: "1", Name: "Test Product 1", Price: 10.00, CategoryId: "1", ProductKey: "T1" },
                { ProductId: "2", Name: "Test Product 2", Price: 20.00, CategoryId: "1", ProductKey: "T2" }
            ];
        }

        // Log products array and sample ProductIds
        console.log('Products array:', products);
        console.log('Sample ProductIds:', products.slice(0, 2).map(p => p.ProductId));

        // Product Search and Category Filter Functionality
        const searchInput = document.getElementById('productSearch');
        const categoryFilter = document.getElementById('categoryFilter');
        const productGrid = document.getElementById('productGrid');
        const clearSearchBtn = document.querySelector('.clear-search');

        function filterProducts() {
            const query = searchInput.value.toLowerCase().trim();
            const selectedCategory = categoryFilter.value;
            const productItems = productGrid.querySelectorAll('.product-item');

            productItems.forEach(item => {
                const name = item.getAttribute('data-name');
                const productKey = item.getAttribute('data-product-key') || '';
                const category = item.getAttribute('data-category');
                const matchesSearch = name.includes(query) || productKey.includes(query);
                const matchesCategory = selectedCategory === 'all' || category === selectedCategory;
                item.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });

            clearSearchBtn.style.display = query ? 'block' : 'none';
        }

        function clearSearch() {
            searchInput.value = '';
            filterProducts();
            searchInput.focus();
        }

        searchInput.addEventListener('input', filterProducts);
        categoryFilter.addEventListener('change', filterProducts);

        function addToCart(productId) {
            if (!products || !Array.isArray(products)) {
                console.error('Products array is invalid:', products);
                showToast('Error: Product data is unavailable.', 'error');
                return;
            }

            console.log('Adding to cart, productId:', productId, 'Type:', typeof productId);
            const prod = products.find(p => {
                const match = String(p.ProductId) === String(productId);
                console.log('Checking product:', p.ProductId, 'Match:', match);
                return match;
            });

            if (!prod) {
                console.error('Product not found for ID:', productId, 'Products:', products);
                showToast('Product not found.', 'error');
                return;
            }

            const key = String(prod.ProductId);
            if (cart[key]) {
                cart[key].qty += 1;
            } else {
                cart[key] = {
                    name: prod.Name,
                    price: prod.SellPrice,
                    qty: 1,
                    productId: prod.ProductId
                };
            }
            console.log('Cart updated:', JSON.stringify(cart));
            renderCart();
        }

        function renderCart() {
            const tbody = document.querySelector('#cartTable tbody');
            const grandTotalCell = document.getElementById('grandTotal');
            const discountPercent = parseFloat(document.getElementById('discountPercent')?.value) || 0;

            if ($.fn.DataTable.isDataTable('#cartTable')) {
                $('#cartTable').DataTable().destroy();
            }

            tbody.innerHTML = '';
            let total = 0;
            for (const key in cart) {
                const item = cart[key];
                total += item.price * item.qty;
                tbody.innerHTML += `
                    <tr>
                        <td class="fw-semibold">${item.name}</td>
                        <td class="text-muted">₹${item.price.toFixed(2)}</td>
                        <td>
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <button class="btn btn-danger btn-icon-split btn-sm" onclick="decreaseQty('${key}')">
                                    <span class="icon text-white-50">
                                        <i class="fas fa-minus"></i>
                                    </span>
                                </button>
                                <span class="fw-bold">${item.qty}</span>
                                <button class="btn btn-success btn-icon-split btn-sm" onclick="increaseQty('${key}')">
                                    <span class="icon text-white-50">
                                        <i class="fas fa-plus"></i>
                                    </span>
                                </button>
                            </div>
                        </td>
                    </tr>`;
            }

            const discountAmount = total * discountPercent / 100;
            const finalTotalAfterDiscount = Math.max(total - discountAmount, 0);
            const cgstAmount = finalTotalAfterDiscount * cgstTax / 100;
            const sgstAmount = finalTotalAfterDiscount * sgstTax / 100;
            const finalTotal = Math.max(finalTotalAfterDiscount + sgstAmount + cgstAmount, 0);
            grandTotalCell.textContent = `₹${finalTotal.toFixed(2)}`;

            $('#cartTable').DataTable({
                paging: false,
                searching: false,
                ordering: false,
                info: false
            });
        }

        function increaseQty(key) {
            if (cart[key]) {
                cart[key].qty += 1;
                console.log('Increased qty for:', key, 'New cart:', cart);
                renderCart();
            }
        }

        function decreaseQty(key) {
            if (cart[key]) {
                cart[key].qty -= 1;
                if (cart[key].qty <= 0) delete cart[key];
                console.log('Decreased qty for:', key, 'New cart:', cart);
                renderCart();
            }
        }

        async function loadTemplateFromLocal(filename) {
            console.log('Loading template:', filename);
            const res = await fetch(`/invTemplates/${filename}`);
            if (!res.ok) throw new Error("Failed to load template: " + res.status);
            return await res.text();
        }

        async function printCart() {
            const tplId = document.getElementById('tplSelect').value;
            const tpl = templates[tplId];
            if (!tpl) {
                showToast('Template not found.', 'error');
                return;
            }

            const layout = (tpl.layout || '').toLowerCase();
            const fileName = `invoice-${layout}.html`;

            let html;
            try {
                html = await loadTemplateFromLocal(fileName);
            } catch (err) {
                showToast("Could not load template file: " + fileName, 'error');
                console.error(err);
                return;
            }

            let rows = '', total = 0;
            for (const k in cart) {
                const i = cart[k];
                const amt = i.qty * i.price;
                rows += `<tr>
                            <td>${i.name}</td>
                            <td class="text-end">${i.qty}</td>
                            <td class="text-end">₹${i.price.toFixed(2)}</td>
                            <td class="text-end">₹${amt.toFixed(2)}</td>
                        </tr>`;
                total += amt;
            }

            const discountPercent = parseFloat(document.getElementById('discountPercent')?.value) || 0;
            const discountAmount = total * discountPercent / 100;
            const finalTotalAfterDiscount = Math.max(total - discountAmount, 0);
            const cgstAmount = finalTotalAfterDiscount * cgstTax / 100;
            const sgstAmount = finalTotalAfterDiscount * sgstTax / 100;
            const igstAmount = finalTotalAfterDiscount * igstTax / 100;
            const finalTotalAfterDiscountAndTaxes = Math.max(finalTotalAfterDiscount + sgstAmount + cgstAmount, 0);

            const filledHtml = html
                .replace('{{rows}}', rows)
                .replace('{{grandTotal}}', `₹${finalTotalAfterDiscount.toFixed(2)}`)
                .replace('{{grandTotalAfterDiscountAndTaxes}}', finalTotalAfterDiscountAndTaxes)
                .replace('{{total}}', total)
                .replace('{{notes}}', tpl.notes ?? '')
                .replace('{{terms}}', tpl.terms ?? '')
                .replace('{{date}}', new Date().toLocaleDateString())
                .replace('{{shopName}}', companyName)
                .replace('{{shopAddress}}', companyAddress)
                .replace('{{shopContact}}', companyContact)
                .replace('{{gstNumber}}', companyGstNo)
                .replace('{{cgst}}', cgstTax)
                .replace('{{sgst}}', sgstTax)
                .replace('{{cgstAmount}}', cgstAmount)
                .replace('{{sgstAmount}}', sgstAmount)
                .replace('{{discountAmount}}', `₹${discountAmount.toFixed(2)}`)
                .replace('{{discountPercent}}', discountPercent)
                .replace('{{customerName}}', 'John Doe')
                .replace('{{customerPhone}}', '9876543210')
                .replace('{{invoiceNumber}}', 'INV-1023');

            const area = document.getElementById('printArea');
            const keep = area.innerHTML;
            area.innerHTML = filledHtml;
            window.print();
            area.innerHTML = keep;
        }

        let invoiceSequence = 1;

        function showToast(message, type) {
            const toastId = type === 'success' ? 'toastSuccess' : 'toastError';
            const toastEl = document.getElementById(toastId);
            const toastBody = toastEl?.querySelector('.toast-body');

            if (toastEl && toastBody) {
                toastBody.innerHTML = (type === 'success' ? '<i class="fas fa-check-circle me-2"></i>' : '<i class="fas fa-exclamation-triangle me-2"></i>') + message;
                new bootstrap.Toast(toastEl).show();
            } else {
                console.error('Toast element not found for type:', type);
            }
        }

        function sellCart(event) {
            event.preventDefault();
            if (Object.keys(cart).length === 0) {
                showToast('No items in cart to sell!', 'error');
                return;
            }

            const invoiceNo = `INV-${invoiceSequence++}`;
            const saleData = {
                InvoiceNo: invoiceNo,
                Template: document.getElementById('tplSelect').value || 'Classic',
                TotalAmount: parseFloat(document.getElementById('grandTotal').textContent.replace('₹', '')) || 0,
                SaleItems: Object.values(cart).map(item => ({
                    ProductId: item.productId,
                    ProductName: item.name,
                    Quantity: item.qty,
                    UnitPrice: item.price,
                    TotalPrice: item.qty * item.price
                }))
            };

            const apiUrl = `${apiBaseUrl}api/Sales`;

            console.log('Sending sale data:', JSON.stringify(saleData));

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(saleData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.text().then(error => { throw new Error(error || 'Unknown error'); });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error submitting sale: ' + error.message, 'error');
                console.error('Error:', error);
            });
        }

        function startNextSale() {
            if (Object.keys(cart).length === 0) {
                showToast('Cart is already empty.', 'error');
                return;
            }

            Object.keys(cart).forEach(key => delete cart[key]);
            console.log('Cart cleared');
            renderCart();
            showToast('Ready for next sale.', 'success');
        }
    </script>
}