@model List<AuthNet.UI.Models.DTO.ProductListViewModel>

@{
    ViewBag.Title = "Sales Panel";

    var allProducts = Model?
        .Where(m => m?.Products != null)
        .SelectMany(m => m.Products)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.ProductDto>();

    var allTemplates = Model?
        .Where(m => m?.Invoices != null)
        .SelectMany(m => m.Invoices)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.InvoiceTemplateDto>();

    var templateMap = allTemplates.ToDictionary(
        t => t.Id,
        t => new
        {
            layout = t.Layout,
            notes = t.Notes,
            terms = t.TermsAndConditions
        });

    var allCats = Model?
        .Where(c => c?.Cats != null)
        .SelectMany( c => c.Cats)
        .ToList() ?? new List<AuthNet.UI.Models.DTO.CategoryViewModel>();

    var companyInfo = Model?
    .Where(m => m?.company != null)
    .Select(m => m.company)
    .FirstOrDefault() ?? new AuthNet.UI.Models.DTO.CompanyInfoDto();

    var taxSetting = Model?
   .Where(m => m?.tax != null)
   .Select(m => m.tax)
   .FirstOrDefault() ?? new AuthNet.UI.Models.DTO.TaxDto();

}

<!-- 🖸 Print-Only CSS -->
<style media="print">
    @@page {
        size: A4;
        margin: 10mm;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

        body * {
            visibility: hidden;
        }

    #printArea, #printArea * {
        visibility: visible;
    }

    #printArea {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        padding: 20px;
        page-break-inside: avoid;
    }

    table, tr, td, th {
        page-break-inside: avoid !important;
        break-inside: avoid !important;
    }

    .btn {
        display: none !important;
    }

    .card-title {
        font-size: 0.85rem;
        white-space: normal;
        word-break: break-word;
        line-height: 1.2;
        min-height: 2.2em;
    }
</style>

<!-- 🎨 Enhanced UI CSS -->
<style>
    :root {
        --primary-color: #1e3a8a;
        --accent-color: #f59e0b;
        --bg-light: #f9fafb;
        --text-muted: #6b7280;
    }

    body {
        background-color: var(--bg-light);
        font-family: 'Segoe UI', sans-serif;
    }

    .container {
        padding-top: 0.5rem !important;
    }

    .header-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 0.3rem 0.5rem;
        border-radius: 6px;
        margin-bottom: 0.5rem;
    }

        .header-section h4 {
            font-size: 1.25rem;
        }

    .form-select {
        max-width: 160px;
        font-size: 0.9rem;
    }

    .form-label {
        font-size: 0.9rem;
    }

    .search-container {
        position: relative;
        margin-bottom: 0.5rem;
    }

        .search-container input {
            padding-right: 2.5rem;
            font-size: 0.9rem;
        }

        .search-container .bi-search {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

        .search-container .clear-search {
            position: absolute;
            right: 28px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #dc3545;
            display: none;
        }

    .filter-container {
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .hotkey-toggle {
        font-size: 0.9rem;
    }

    .cart-table {
        font-size: 0.85rem;
    }

        .cart-table th, .cart-table td {
            padding: 6px;
        }

    .action-buttons .btn {
        font-size: 0.85rem;
        padding: 5px 10px;
    }

    .no-spinner::-webkit-inner-spin-button,
    .no-spinner::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .no-spinner[type="number"] {
        -moz-appearance: textfield;
    }

    /* ✅ ENHANCED PRODUCT GRID AND CARD */
    .product-grid {
        margin-top: 0.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .product-item {
        flex: 1 0 calc(16.66% - 0.75rem);
        max-width: calc(16.66% - 0.75rem);
    }

    @@media (max-width: 1200px) {
        .product-item

    {
        flex: 1 0 calc(20% - 0.75rem);
        max-width: calc(20% - 0.75rem);
    }

    }

    @@media (max-width: 992px) {
        .product-item

    {
        flex: 1 0 calc(25% - 0.75rem);
        max-width: calc(25% - 0.75rem);
    }

    }

    @@media (max-width: 768px) {
        .product-item

    {
        flex: 1 0 calc(33.33% - 0.75rem);
        max-width: calc(33.33% - 0.75rem);
    }

    }

    @@media (max-width: 576px) {
        .product-item

    {
        flex: 1 0 calc(50% - 0.75rem);
        max-width: calc(50% - 0.75rem);
    }

    }

    .product-card {
        cursor: pointer;
        border-radius: 0.75rem;
        border: 1px solid #dee2e6;
        background-color: #ffffff;
        padding: 0.75rem;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        transition: box-shadow 0.2s ease-in-out, transform 0.2s;
        position: relative;
    }

        .product-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
            transform: translateY(-2px);
            background-color: #f8f9fa;
        }

        .product-card .card-body {
            padding: 0;
        }

    .card-title {
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 0;
        line-height: 1.3;
        white-space: normal;
        overflow: hidden;
        word-break: break-word;
        text-wrap: balance;
    }

    .product-card .badge {
        position: absolute;
        top: 6px;
        right: 6px;
        background-color: #007bff;
        color: white;
        font-size: 0.65rem;
        font-weight: 500;
        padding: 0.2rem 0.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 0 0.1rem rgba(0, 0, 0, 0.15);
    }
</style>


<div class="container py-1">
    <!-- Header Section -->
    <div class="header-section d-flex justify-content-between align-items-center flex-wrap gap-1">
        <div class="flex-grow-1">
            <h4 class="mb-0 fw-semibold d-flex align-items-center">
                <i class="bi bi-cash-coin me-1"></i> Sales Panel
            </h4>
        </div>
        <div class="d-flex align-items-center gap-1">
            <label class="form-label mb-0">Template:</label>
            <select id="tplSelect" class="form-select" name="Template" required>
                @foreach (var t in allTemplates)
                {
                    <option value="@t.Id">@t.Layout</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        <!-- Compact Product List with Search -->
        <div class="col-md-7 mb-2">
            <div class="card shadow-sm rounded-3 border-0">
                <div class="card-body p-2">
                    <h5 class="card-title text-primary mb-2">
                        <i class="bi bi-cart3 me-2"></i> Products
                    </h5>

                    <!-- Category filter -->
                    <div class="filter-container">
                        <label class="form-label mb-0">Category:</label>
                        <select id="categoryFilter" class="form-select" name="Categories">
                            <option disabled value="">-- Select Category --</option>
                            <option value="all" selected>All Categories</option>
                            @foreach (var t in allCats)
                            {
                                <option value="@t.CategoryId">@t.Name</option>
                            }
                        </select>
                    </div>



                    <!-- Search Input -->
                    <div class="search-container">
                        <input type="text" id="productSearch" class="form-control" placeholder="Search products or hotkeys..." aria-label="Search products">
                        <i class="bi bi-search"></i>
                        <i class="bi bi-x-circle clear-search" onclick="clearSearch()"></i>
                    </div>
                    <!-- Hotkey Toggle -->
                    <div class="form-check hotkey-toggle mb-2">
                        <input class="form-check-input" type="checkbox" id="hotkeyToggle" checked>
                        <label class="form-check-label" for="hotkeyToggle">Enable Hotkeys</label>
                    </div>

                    <!-- ✅ Product Grid -->
                    <div class="product-grid" id="productGrid">
                        @foreach (var product in allProducts)
                        {
                            <div class="product-item"
                                 data-name="@product.Name.ToLower()"
                                 data-hotkey="@(product.HotKey?.ToLower() ?? "")"
                                 data-id="@product.ProductId"
                                 data-category="@product.CategoryId">

                                <div class="product-card"
                                     onclick="addToCart('@(product.HotKey ?? product.ProductId.ToString())')">

                                    <div class="card-body">
                                        <h6 class="card-title" title="@product.Name">@product.Name</h6>
                                    </div>

                                    @if (!string.IsNullOrEmpty(product.HotKey))
                                    {
                                        <span class="badge">@product.HotKey</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>


                </div>
            </div>
        </div>

        <!-- Narrower Cart Display -->
        <div class="col-md-5" id="printArea">
            <div class="card shadow-sm rounded-3 border-0">
                <div class="card-body p-3">
                    <div class="d-flex flex-wrap align-items-center justify-content-between gap-2 mb-2">
                        <h5 class="card-title text-success m-0 flex-grow-1">
                            <i class="bi bi-receipt me-2"></i> Cart
                        </h5>
                        <div class="action-buttons d-flex  gap-2">

                            <!-- Discount Input -->
                            <div class="input-group input-group-sm" style="max-width: 60px;">
                                <input type="number"
                                       id="discountPercent"
                                       class="form-control no-spinner text-end"
                                       placeholder="%"
                                       min="0"
                                       max="100"
                                       step="0.1"
                                       onchange="renderCart()" />
                            </div>

                            <form id="sellForm">
                                <input type="hidden" id="cartData" name="cartData" value="" />
                                <button type="submit" class="btn btn-success" onclick="sellCart(event)">
                                    <i class="bi bi-currency-rupee me-1"></i> Sell
                                </button>
                            </form>
                            <button class="btn btn-outline-dark" onclick="printCart()">
                                <i class="bi bi-printer me-1"></i> Print
                            </button>
                            <button class="btn btn-outline-secondary" onclick="startNextSale()" title="Clear cart">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                    <table class="table table-hover cart-table text-center" id="cartTable">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>Price (₹)</th>
                                <th style="width: 120px;">Qty</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot>
                            
                            <tr class="table-light fw-bold">
                                <td colspan="2" class="text-end">Grand Total (₹):</td>
                                <td id="grandTotal">₹0.00</td>
                            </tr>
                        </tfoot>


                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toastSuccess" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
        <div id="toastError" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const companyName = '@(companyInfo.Name ?? "InventoryPro")';
        const companyAddress = '@(companyInfo.Address ?? "Pune")';
        const companyGstNo = '@(companyInfo.GSTIN ?? "GSTXXXXXXX")';
        const companyContact = '@(companyInfo.ContactNumber ?? "XXXXXXXXXX")';

        const cgstTax = '@(taxSetting.CGST)';
        const sgstTax = '@(taxSetting.SGST)';
        const igstTax = '@(taxSetting.IGST)';

        const apiBaseUrl = '@ViewBag.ApiBaseUrl';
        const products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(allProducts));
        const templates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(templateMap));
        const cart = {};

        // Product Search and Category Filter Functionality
        const searchInput = document.getElementById('productSearch');
        const categoryFilter = document.getElementById('categoryFilter');
        const productGrid = document.getElementById('productGrid');
        const clearSearchBtn = document.querySelector('.clear-search');
        const hotkeyToggle = document.getElementById('hotkeyToggle');

        function filterProducts() {
            const query = searchInput.value.toLowerCase().trim();
            const selectedCategory = categoryFilter.value;
            const productItems = productGrid.querySelectorAll('.product-item');

            productItems.forEach(item => {
                const name = item.getAttribute('data-name');
                const hotkey = item.getAttribute('data-hotkey');
                const category = item.getAttribute('data-category');
                const matchesSearch = name.includes(query) || hotkey.includes(query);
                const matchesCategory = selectedCategory === 'all' || category === selectedCategory;
                item.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });

            clearSearchBtn.style.display = query ? 'block' : 'none';
        }

        function clearSearch() {
            searchInput.value = '';
            filterProducts();
            searchInput.focus();
        }

        searchInput.addEventListener('input', filterProducts);
        categoryFilter.addEventListener('change', filterProducts);

        document.addEventListener('keydown', function (e) {
            if (!hotkeyToggle.checked) return; // Skip if hotkeys are disabled
            const tag = (e.target || {}).tagName;
            if (tag === 'INPUT' || tag === 'TEXTAREA' || e.target.isContentEditable) return;
            if (e.key.length !== 1) return;

            const key = e.key.toUpperCase();
            addToCart(key);
        });

               function addToCart(keyOrId) {
            const prod = products.find(p =>
                (p.HotKey || '').toUpperCase() === keyOrId.toUpperCase() ||
                p.ProductId == keyOrId
            );
            if (!prod) {
                console.log('Product not found for key or ID:', keyOrId);
                showToast('Product not found.', 'error');
                return;
            }

            const key = prod.HotKey || prod.ProductId.toString();
            cart[key] ? cart[key].qty++ : cart[key] = { name: prod.Name, price: prod.Price, qty: 1, productId: prod.ProductId };
            renderCart();
        }


            function renderCart() {
            const tbody = document.querySelector('#cartTable tbody');
            const grandTotalCell = document.getElementById('grandTotal');
            const discountPercent = parseFloat(document.getElementById('discountPercent')?.value) || 0;

            tbody.innerHTML = '';
            let total = 0;
            for (const key in cart) {
                const item = cart[key];
                total += item.price * item.qty;
                tbody.innerHTML += `
                    <tr>
                        <td>${item.name}</td>
                        <td>₹${item.price.toFixed(2)}</td>
                        <td>
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <button class="btn btn-sm btn-outline-danger" onclick="decreaseQty('${key}')">−</button>
                                <span class="fw-bold">${item.qty}</span>
                                <button class="btn btn-sm btn-outline-success" onclick="increaseQty('${key}')">+</button>
                            </div>
                        </td>
                    </tr>`;
            }

            const discountAmount = total * discountPercent / 100;
            const finalTotalAfterDiscount = Math.max(total - discountAmount, 0);

            const cgstAmount = finalTotalAfterDiscount * cgstTax / 100;
            const sgstAmount = finalTotalAfterDiscount * sgstTax / 100;

            const finalTotal = Math.max(finalTotalAfterDiscount + sgstAmount + cgstAmount, 0);

            grandTotalCell.textContent = `₹${finalTotal.toFixed(2)}`;
        }


        function increaseQty(key) {
            if (cart[key]) {
                cart[key].qty += 1;
                renderCart();
            }
        }

        function decreaseQty(key) {
            if (cart[key]) {
                cart[key].qty -= 1;
                if (cart[key].qty <= 0) delete cart[key];
                renderCart();
            }
        }

        async function loadTemplateFromLocal(filename) {
            const res = await fetch(`/invTemplates/${filename}`);
            if (!res.ok) throw new Error("Failed to load template: " + res.status);
            return await res.text();
        }

        async function printCart() {
            const tplId = document.getElementById('tplSelect').value;
            const tpl = templates[tplId];
            if (!tpl) return alert('Template not found');

            const layout = (tpl.layout || '').toLowerCase();
            const fileName = `invoice-${layout}.html`;

            let html;
            try {
                html = await loadTemplateFromLocal(fileName);
            } catch (err) {
                alert("Could not load template file: " + fileName);
                console.error(err);
                return;
            }

            let rows = '', total = 0;
            for (const k in cart) {
                const i = cart[k];
                const amt = i.qty * i.price;
                rows += `<tr>
                            <td>${i.name}</td>
                            <td class="text-end">${i.qty}</td>
                            <td class="text-end">₹${i.price.toFixed(2)}</td>
                            <td class="text-end">₹${amt.toFixed(2)}</td>
                        </tr>`;
                total += amt;
            }

            const discountPercent = parseFloat(document.getElementById('discountPercent')?.value) || 0;
            const discountAmount = total * discountPercent / 100;
            const finalTotalAfterDiscount = Math.max(total - discountAmount, 0);

            const cgstAmount = finalTotalAfterDiscount * cgstTax / 100;
            const sgstAmount = finalTotalAfterDiscount * sgstTax / 100;
            const igstAmount = finalTotalAfterDiscount * igstTax / 100;

            const finalTotalAfterDiscountAndTaxes = Math.max(finalTotalAfterDiscount + sgstAmount + cgstAmount, 0);

            const filledHtml = html
                .replace('{{rows}}', rows)
                .replace('{{grandTotal}}', `₹${finalTotalAfterDiscount.toFixed(2)}`)
                .replace('{{grandTotalAfterDiscountAndTaxes}}', finalTotalAfterDiscountAndTaxes)
                .replace('{{total}}', total)
                .replace('{{notes}}', tpl.notes ?? '')
                .replace('{{terms}}', tpl.terms ?? '')
                .replace('{{date}}', new Date().toLocaleDateString())
                .replace('{{shopName}}', companyName)
                .replace('{{shopAddress}}',companyAddress )
                .replace('{{shopContact}}', companyContact)
                .replace('{{gstNumber}}', companyGstNo)
                .replace('{{cgst}}', cgstTax)
                .replace('{{sgst}}', sgstTax)
                .replace('{{cgstAmount}}', cgstAmount)
                .replace('{{sgstAmount}}', sgstAmount)
                .replace('{{discountAmount}}', `₹${discountAmount.toFixed(2)}`)
                .replace('{{discountPercent}}', discountPercent)
                .replace('{{customerName}}', 'John Doe')
                .replace('{{customerPhone}}', '9876543210')
                .replace('{{invoiceNumber}}', 'INV-1023');

            const area = document.getElementById('printArea');
            const keep = area.innerHTML;
            area.innerHTML = filledHtml;
            window.print();
            area.innerHTML = keep;
        }

        let invoiceSequence = 1;

        function showToast(message, type) {
            const toastId = type === 'success' ? 'toastSuccess' : 'toastError';
            const toastEl = document.getElementById(toastId);
            const toastBody = toastEl?.querySelector('.toast-body');

            if (toastEl && toastBody) {
                toastBody.innerHTML = (type === 'success' ? '<i class="bi bi-check-circle me-2"></i>' : '<i class="bi bi-exclamation-triangle me-2"></i>') + message;
                new bootstrap.Toast(toastEl).show();
            } else {
                console.error('Toast element not found for type:', type);
            }
        }

        function sellCart(event) {
            event.preventDefault();
            if (Object.keys(cart).length === 0) {
                showToast('No items in cart to sell!', 'error');
                return;
            }

            const invoiceNo = `INV-${invoiceSequence++}`;

            const saleData = {
                InvoiceNo: invoiceNo,
                Template: document.getElementById('tplSelect').value || 'Classic',
                TotalAmount: parseFloat(document.getElementById('grandTotal').textContent.replace('₹', '')) || 0,
                SaleItems: Object.values(cart).map(item => ({
                    ProductId: item.productId,
                    ProductName: item.name,
                    Quantity: item.qty,
                    UnitPrice: item.price,
                    TotalPrice: item.qty * item.price
                }))
            };

            const apiUrl = `${apiBaseUrl}api/Sales`;

            console.log('Sending sale data:', JSON.stringify(saleData));

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(saleData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.text().then(error => { throw new Error(error || 'Unknown error'); });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error submitting sale: ' + error.message, 'error');
                console.error('Error:', error);
            });
        }

        function startNextSale() {
            if (Object.keys(cart).length === 0) {
                showToast('Cart is already empty.', 'error');
                return;
            }

            Object.keys(cart).forEach(key => delete cart[key]);
            renderCart();
            showToast('Ready for next sale.', 'success');
        }
    </script>
}