@using Microsoft.AspNetCore.Http

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] | InventoryPro</title>

    <!-- Bootstrap CSS & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

    <style>
        body {
            background-color: #f4f6fa;
            font-family: 'Segoe UI', sans-serif;
        }

        .sidebar {
            height: 100vh;
            background-color: #343a40;
            padding: 1rem;
            color: #fff;
        }

            .sidebar .nav-link {
                color: #adb5bd;
                transition: background-color 0.3s, color 0.3s;
            }

                .sidebar .nav-link.active,
                .sidebar .nav-link:hover {
                    color: #fff;
                    background-color: #495057;
                    border-radius: 0.375rem;
                }

        .dashboard-cards .card {
            color: #fff;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

            .dashboard-cards .card:hover {
                transform: translateY(-5px);
            }

        .bg-product {
            background-color: #00c0ef;
        }

        .bg-category {
            background-color: #00a65a;
        }

        .bg-supplier {
            background-color: #f39c12;
        }

        .bg-month {
            background-color: #dd4b39;
        }

        .chart-box {
            height: 300px;
        }

        .user-dropdown {
            position: absolute;
            right: 1rem;
            top: 1rem;
        }
    </style>
</head>
<body>
    @{
        var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
        var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
        Func<string, string, string> isActive = (controller, action) =>
        currentController == controller && currentAction == action ? "active" : "";

        var token = Context?.Session?.GetString("JWT");
        var username = Context?.Session?.GetString("Username");
        var isLoggedIn = !string.IsNullOrEmpty(token);
    }

    <div class="container-fluid">
        <div class="row">
            @if (isLoggedIn)
            {
                <nav class="col-md-2 sidebar">
                    <div class="text-center mb-4">
                        <img src="https://ui-avatars.com/api/?name=@username&background=0D8ABC&color=fff&size=60" class="rounded-circle mb-2" width="60" alt="Profile" />
                        <h6 class="mb-0">@username</h6>
                        <span class="text-success small">Online</span>
                    </div>
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link @isActive("Home", "Index")" asp-controller="Home" asp-action="Index">
                                <i class="bi bi-house-door"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Products", "Index")" asp-controller="Products" asp-action="Index">
                                <i class="bi bi-box-seam"></i> Products <span class="badge bg-primary ms-1">New</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Categories", "Index")" asp-controller="Categories" asp-action="Index">
                                <i class="bi bi-tags"></i> Categories
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Suppliers", "Index")" asp-controller="Suppliers" asp-action="Index">
                                <i class="bi bi-truck"></i> Suppliers
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("AuditLogs", "Index")" asp-controller="AuditLogs" asp-action="Index">
                                <i class="bi bi-clipboard-data"></i> Audit Logs
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Customers", "Index")" asp-controller="Customers" asp-action="Index">
                                <i class="bi bi-people"></i> Customers
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Inventory", "Index")" asp-controller="Inventories" asp-action="Index">
                                <i class="bi bi-boxes"></i> Inventory
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("Orders", "Index")" asp-controller="Orders" asp-action="Index">
                                <i class="bi bi-basket"></i> Orders
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("OrderItems", "Index")" asp-controller="OrderItems" asp-action="Index">
                                <i class="bi bi-list-check"></i> Order Items
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @isActive("PurchaseOrders", "Index")" asp-controller="PurchaseOrders" asp-action="Index">
                                <i class="bi bi-receipt"></i> Purchase Orders
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-danger" asp-controller="Auth" asp-action="Logout">
                                <i class="bi bi-box-arrow-right"></i> Logout
                            </a>
                        </li>
                    </ul>
                </nav>
            }

            <main class="@(isLoggedIn ? "col-md-10 py-4" : "col-md-12 mt-5")">
                <div class="container-fluid">
                    @if (!isLoggedIn && currentController == "Home" && currentAction == "Index")
                    {
                        <div class="text-center">
                            <h2>Welcome to InventoryPro</h2>
                            <p class="lead">Please login or register to continue.</p>
                            <a class="btn btn-primary m-2" asp-controller="Auth" asp-action="Login"><i class="bi bi-box-arrow-in-right"></i> Login</a>
                            <a class="btn btn-outline-primary m-2" asp-controller="Auth" asp-action="Register"><i class="bi bi-person-plus"></i> Register</a>
                        </div>
                    }
                    else
                    {
                        @await Html.PartialAsync("_Alerts")
                        @RenderBody()
                    }
                </div>
            </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const toastElList = [].slice.call(document.querySelectorAll('.toast'));
            toastElList.forEach(function (toastEl) {
                const toast = new bootstrap.Toast(toastEl, { delay: 4000 });
                toast.show();
            });

            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>

    @if (Model is AuthNet.UI.Models.DTO.DashboardViewModel dashboardModel)
    {
        <script>
            const total = @(
        dashboardModel.TotalProducts +
        dashboardModel.TotalCategories +
        dashboardModel.TotalSuppliers +
        dashboardModel.TotalTasks +
        dashboardModel.TotalOrders
        );

            const centerTextPlugin = {
                id: 'centerText',
                beforeDraw: (chart) => {
                    const { width, height } = chart;
                    const ctx = chart.ctx;
                    ctx.restore();
                    ctx.font = '1.5em Segoe UI';
                    ctx.fillStyle = '#333';
                    ctx.textBaseline = 'middle';

                    const text = `Total: ${total}`;
                    const textX = (width - ctx.measureText(text).width) / 2;
                    const textY = height / 2;
                    ctx.fillText(text, textX, textY);
                    ctx.save();
                }
            };

            const ctx = document.getElementById('donutChart')?.getContext('2d');
            if (ctx) {
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Products', 'Categories', 'Suppliers', 'Tasks', 'Orders'],
                        datasets: [{
                            data: [
            @dashboardModel.TotalProducts,
            @dashboardModel.TotalCategories,
            @dashboardModel.TotalSuppliers,
            @dashboardModel.TotalTasks,
            @dashboardModel.TotalOrders
                            ],
                            backgroundColor: ['#36A2EB', '#4BC0C0', '#FFCD56', '#FF6384', '#9966FF'],
                            borderColor: '#fff',
                            borderWidth: 2,
                            hoverOffset: 12
                        }]
                    },
                    options: {
                        cutout: '70%',
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        return `${context.label}: ${context.raw}`;
                                    }
                                }
                            }
                        }
                    },
                    plugins: [centerTextPlugin]
                });
            }
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>